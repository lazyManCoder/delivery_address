// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:delivery_address/src/model/around_placeV4_entity.dart';
import 'package:delivery_address/src/model/country_format_entity.dart';
import 'package:delivery_address/src/model/country_info_entity.dart';
import 'package:delivery_address/src/model/inverse_address_entity.dart';
// import 'package:delivery_address/src/model/user_entity.dart';
import 'package:flutter/material.dart' show debugPrint;


JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AroundPlaceV4Entity>[] is M) {
      return data.map<AroundPlaceV4Entity>((Map<String, dynamic> e) =>
          AroundPlaceV4Entity.fromJson(e)).toList() as M;
    }
    if (<AroundPlaceV4Suggestion>[] is M) {
      return data.map<AroundPlaceV4Suggestion>((Map<String, dynamic> e) =>
          AroundPlaceV4Suggestion.fromJson(e)).toList() as M;
    }
    if (<AroundPlaceV4Pois>[] is M) {
      return data.map<AroundPlaceV4Pois>((Map<String, dynamic> e) =>
          AroundPlaceV4Pois.fromJson(e)).toList() as M;
    }
    if (<AroundPlaceV4PoisBizExt>[] is M) {
      return data.map<AroundPlaceV4PoisBizExt>((Map<String, dynamic> e) =>
          AroundPlaceV4PoisBizExt.fromJson(e)).toList() as M;
    }
    if (<AroundPlaceV4PoisPhotos>[] is M) {
      return data.map<AroundPlaceV4PoisPhotos>((Map<String, dynamic> e) =>
          AroundPlaceV4PoisPhotos.fromJson(e)).toList() as M;
    }
    if (<CountryFormatEntity>[] is M) {
      return data.map<CountryFormatEntity>((Map<String, dynamic> e) =>
          CountryFormatEntity.fromJson(e)).toList() as M;
    }
    if (<CountryFormatDistricts>[] is M) {
      return data.map<CountryFormatDistricts>((Map<String, dynamic> e) =>
          CountryFormatDistricts.fromJson(e)).toList() as M;
    }
    if (<CountryFormatDistrictsDistricts>[] is M) {
      return data.map<CountryFormatDistrictsDistricts>((
          Map<String, dynamic> e) =>
          CountryFormatDistrictsDistricts.fromJson(e)).toList() as M;
    }
    if (<CountryFormatDistrictsDistrictsDistricts>[] is M) {
      return data.map<CountryFormatDistrictsDistrictsDistricts>((
          Map<String, dynamic> e) =>
          CountryFormatDistrictsDistrictsDistricts.fromJson(e)).toList() as M;
    }
    if (<CountryInfoEntity>[] is M) {
      return data.map<CountryInfoEntity>((Map<String, dynamic> e) =>
          CountryInfoEntity.fromJson(e)).toList() as M;
    }
    if (<CountryInfoDistricts>[] is M) {
      return data.map<CountryInfoDistricts>((Map<String, dynamic> e) =>
          CountryInfoDistricts.fromJson(e)).toList() as M;
    }
    if (<CountryInfoDistrictsDistricts>[] is M) {
      return data.map<CountryInfoDistrictsDistricts>((Map<String, dynamic> e) =>
          CountryInfoDistrictsDistricts.fromJson(e)).toList() as M;
    }
    if (<CountryInfoDistrictsDistrictsDistricts>[] is M) {
      return data.map<CountryInfoDistrictsDistrictsDistricts>((
          Map<String, dynamic> e) =>
          CountryInfoDistrictsDistrictsDistricts.fromJson(e)).toList() as M;
    }
    if (<InverseAddressEntity>[] is M) {
      return data.map<InverseAddressEntity>((Map<String, dynamic> e) =>
          InverseAddressEntity.fromJson(e)).toList() as M;
    }
    if (<InverseAddressRegeocode>[] is M) {
      return data.map<InverseAddressRegeocode>((Map<String, dynamic> e) =>
          InverseAddressRegeocode.fromJson(e)).toList() as M;
    }
    if (<InverseAddressRegeocodeRoads>[] is M) {
      return data.map<InverseAddressRegeocodeRoads>((Map<String, dynamic> e) =>
          InverseAddressRegeocodeRoads.fromJson(e)).toList() as M;
    }
    if (<InverseAddressRegeocodeRoadinters>[] is M) {
      return data.map<InverseAddressRegeocodeRoadinters>((
          Map<String, dynamic> e) =>
          InverseAddressRegeocodeRoadinters.fromJson(e)).toList() as M;
    }
    if (<InverseAddressRegeocodeAddressComponent>[] is M) {
      return data.map<InverseAddressRegeocodeAddressComponent>((
          Map<String, dynamic> e) =>
          InverseAddressRegeocodeAddressComponent.fromJson(e)).toList() as M;
    }
    if (<InverseAddressRegeocodeAddressComponentStreetNumber>[] is M) {
      return data.map<InverseAddressRegeocodeAddressComponentStreetNumber>((
          Map<String, dynamic> e) =>
          InverseAddressRegeocodeAddressComponentStreetNumber.fromJson(e))
          .toList() as M;
    }
    if (<InverseAddressRegeocodeAois>[] is M) {
      return data.map<InverseAddressRegeocodeAois>((Map<String, dynamic> e) =>
          InverseAddressRegeocodeAois.fromJson(e)).toList() as M;
    }
    if (<InverseAddressRegeocodePois>[] is M) {
      return data.map<InverseAddressRegeocodePois>((Map<String, dynamic> e) =>
          InverseAddressRegeocodePois.fromJson(e)).toList() as M;
    }
    // if (<UserEntity>[] is M) {
    //   return data.map<UserEntity>((Map<String, dynamic> e) =>
    //       UserEntity.fromJson(e)).toList() as M;
    // }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AroundPlaceV4Entity).toString(): AroundPlaceV4Entity.fromJson,
    (AroundPlaceV4Suggestion).toString(): AroundPlaceV4Suggestion.fromJson,
    (AroundPlaceV4Pois).toString(): AroundPlaceV4Pois.fromJson,
    (AroundPlaceV4PoisBizExt).toString(): AroundPlaceV4PoisBizExt.fromJson,
    (AroundPlaceV4PoisPhotos).toString(): AroundPlaceV4PoisPhotos.fromJson,
    (CountryFormatEntity).toString(): CountryFormatEntity.fromJson,
    (CountryFormatDistricts).toString(): CountryFormatDistricts.fromJson,
    (CountryFormatDistrictsDistricts)
        .toString(): CountryFormatDistrictsDistricts.fromJson,
    (CountryFormatDistrictsDistrictsDistricts)
        .toString(): CountryFormatDistrictsDistrictsDistricts.fromJson,
    (CountryInfoEntity).toString(): CountryInfoEntity.fromJson,
    (CountryInfoDistricts).toString(): CountryInfoDistricts.fromJson,
    (CountryInfoDistrictsDistricts).toString(): CountryInfoDistrictsDistricts
        .fromJson,
    (CountryInfoDistrictsDistrictsDistricts)
        .toString(): CountryInfoDistrictsDistrictsDistricts.fromJson,
    (InverseAddressEntity).toString(): InverseAddressEntity.fromJson,
    (InverseAddressRegeocode).toString(): InverseAddressRegeocode.fromJson,
    (InverseAddressRegeocodeRoads).toString(): InverseAddressRegeocodeRoads
        .fromJson,
    (InverseAddressRegeocodeRoadinters)
        .toString(): InverseAddressRegeocodeRoadinters.fromJson,
    (InverseAddressRegeocodeAddressComponent)
        .toString(): InverseAddressRegeocodeAddressComponent.fromJson,
    (InverseAddressRegeocodeAddressComponentStreetNumber)
        .toString(): InverseAddressRegeocodeAddressComponentStreetNumber
        .fromJson,
    (InverseAddressRegeocodeAois).toString(): InverseAddressRegeocodeAois
        .fromJson,
    (InverseAddressRegeocodePois).toString(): InverseAddressRegeocodePois
        .fromJson,
    // (UserEntity).toString(): UserEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}